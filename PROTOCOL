lipsync implementation v1.0

Lipsync is a wrapper around a database that provides syncing capabilites for
tables.

How it works:
Wrapper - JSON - UTF8
Encryption - AES-256 - Key is sha256digest of secret, specified by user
- 1. Sending - Pad outgoing plaintexts with whitespace,
               ensure that last char of block is ETB
- 2. Recieving - decrypt each block as it comes, look for ETB
Lock - Lock the database/ your view of it and enter a transaction : TODO
Auth - Symmetric Encryption of a secret, both sides validate :
- 1. [SHA256HEXDIGESTOFSECRET] - no other objects, just string
- 2. Terminate if Auth not acceptable
- 3. Else {LipSync_Continue = True}
Status - set up table to sync
- 1. {table: tablename, uuids:[UUIDS]} from Client
- 2. {table: tablename, uuids:[UUIDS]} from server if it can sync tablename
- - 1. Else Terminate
Request - Each side asks for all of the rows they want
- 1. {need: [UUIDS]} from both
Response - Each side responds with row hash + row data
- 1. {uuid:UUID, record ={record}}
- 2. {LipSync_Done: True} when done
Terminate - {LipSync_Continue = False} +
              wait 30s for {LipSync_Continue = False}
Commit - Commit the transaction
